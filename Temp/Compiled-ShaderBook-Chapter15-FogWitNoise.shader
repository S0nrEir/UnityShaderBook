// Compiled shader for PC, Mac & Linux Standalone

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
Shader "ShaderBook/Chapter15/FogWitNoise" {
Properties {
 _MainTex ("Main Tex", 2D) = "white" { }
 _FogDensity ("Fog Density", Float) = 1.000000
 _FogColor ("Fog Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _FogStart ("Fog Start", Float) = 0.000000
 _FogEnd ("Fog End", Float) = 1.000000
 _NoiseTex ("Noise Tex", 2D) = "white" { }
 _FogXSpeed ("Fox X Speed", Float) = 0.100000
 _FogYSpeed ("Fox Y Speed", Float) = 0.100000
 _NoiseAmount ("Noise Amount", Float) = 1.000000
}
SubShader { 


 // Stats for Vertex shader:
 //        d3d11: 18 math
 // Stats for Fragment shader:
 //        d3d11: 13 math, 3 texture
 Pass {
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 18 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Matrix4x4 _FrustumCornersRay at 32
  Vector4 _MainTex_TexelSize at 96
}
Constant Buffer "UnityPerDraw" (176 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
//
      vs_4_0
      dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyzw
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul r1.xyzw, r0.yyyy, cb2[18].xyzw
   5: mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
   6: mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
   7: mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
   8: mov o1.xyzw, v1.xyxy
   9: lt r0.xy, l(0.500000, 0.500000, 0.000000, 0.000000), v1.xyxx
  10: and r0.y, r0.y, r0.x
  11: movc r0.y, r0.y, l(2), l(3)
  12: lt r0.zw, v1.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
  13: and r0.xz, r0.wwww, r0.xxzx
  14: movc r0.x, r0.x, l(1), r0.y
  15: movc r0.x, r0.z, l(0), r0.x
  16: iadd r0.y, -r0.x, l(3)
  17: lt r0.z, cb0[6].y, l(0.000000)
  18: movc r0.x, r0.z, r0.y, r0.x
  19: dp4 o2.x, cb0[2].xyzw, icb[r0.x + 0].xyzw
  20: dp4 o2.y, cb0[3].xyzw, icb[r0.x + 0].xyzw
  21: dp4 o2.z, cb0[4].xyzw, icb[r0.x + 0].xyzw
  22: dp4 o2.w, cb0[5].xyzw, icb[r0.x + 0].xyzw
  23: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 13 math, 2 temp registers, 3 textures
Set 2D Texture "_CameraDepthTexture" to slot 0 sampler slot 1
Set 2D Texture "_NoiseTex" to slot 1 sampler slot 2
Set 2D Texture "_MainTex" to slot 2 sampler slot 0

Constant Buffer "$Globals" (176 bytes) on slot 0 {
  Float _FogDensity at 112
  Vector4 _FogColor at 128
  Float _FogStart at 144
  Float _FogEnd at 148
  Float _FogXSpeed at 152
  Float _FogYSpeed at 156
  Float _NoiseAmount at 160
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _Time at 0
  Vector3 _WorldSpaceCameraPos at 64
  Vector4 _ZBufferParams at 112
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float    y  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[11], immediateIndexed
      dcl_constantbuffer CB1[8], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v1.zw
      dcl_input_ps linear v2.y
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v1.zwzz, t0.xyzw, s1
   1: mad r0.x, cb1[7].z, r0.x, cb1[7].w
   2: div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
   3: mad r0.x, r0.x, v2.y, cb1[4].y
   4: add r0.x, -r0.x, cb0[9].y
   5: add r0.y, -cb0[9].x, cb0[9].y
   6: div r0.x, r0.x, r0.y
   7: mul r0.x, r0.x, cb0[7].x
   8: mad r0.yz, cb1[0].yyyy, cb0[9].zzwz, v1.xxyx
   9: sample r1.xyzw, r0.yzyy, t1.xyzw, s2
  10: add r0.y, r1.z, l(-0.500000)
  11: mad r0.y, r0.y, cb0[10].x, l(1.000000)
  12: mul_sat r0.x, r0.y, r0.x
  13: sample r1.xyzw, v1.xyxx, t2.xyzw, s0
  14: add r0.yzw, -r1.xxyz, cb0[8].xxyz
  15: mad o0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
  16: mov o0.w, r1.w
  17: ret 
// Approximately 0 instruction slots used


 }
}
Fallback Off
}